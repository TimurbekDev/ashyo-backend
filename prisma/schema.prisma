generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Modellar

model Region {
  id         Int       @id @default(autoincrement())
  name       String
  parent     Region?   @relation("ParentRegion", fields: [parentId], references: [id])
  children   Region[]  @relation("ParentRegion")
  parentId   Int?
  citiesIn   Address[] @relation("CityRegion")
  villagesIn Address[] @relation("VillageRegion")
}

model Address {
  id        Int     @id @default(autoincrement())
  city      Region  @relation("CityRegion", fields: [cityId], references: [id])
  village   Region  @relation("VillageRegion", fields: [villageId], references: [id])
  cityId    Int
  villageId Int
  user      User?   @relation(fields: [userId], references: [id])
  userId    Int?
  Order     Order[] @relation("AdressOrder")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  fullName  String
  image     String?
  password  String
  addresses Address[]
  role      Roles     @default(User)
  Cart      Cart[]    @relation("UserCart")
  Review    Review[]  @relation("UserRe")
  Like      Like[]    @relation("UserLike")
  Order     Order[]   @relation("OrderUser")
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  icon     String?
  image    String?
  parent   Category?  @relation("ParentCategory", fields: [parentId], references: [id])
  parentId Int?
  children Category[] @relation("ParentCategory")
  Varation Varation[] @relation("Category")
  Product  Product[]  @relation("ProductCategory")
}

model Varation {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  category       Category         @relation("Category", fields: [categoryId], references: [id])
  categoryId     Int
  VarationOption VarationOption[] @relation("Varation")
}

model VarationOption {
  id             Int              @id @default(autoincrement())
  value          String
  varation       Varation         @relation("Varation", fields: [varationId], references: [id])
  varationId     Int
  ProductOptions ProductOptions[] @relation("ProductItemVO")
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String
  category       Category         @relation("ProductCategory", fields: [categoryId], references: [id])
  categoryId     Int
  image          String
  ProductItem    ProductItem[]    @relation("ProductProductItem")
  Review         Review[]         @relation("ProductRe")
  brend          Brend            @relation(fields: [brendId], references: [id])
  brendId        Int
  ProductOptions ProductOptions[] @relation("ProductPO")
  Like           Like[]           @relation("ProductLike")
}

model Cart {
  id       Int        @id @default(autoincrement())
  user     User       @relation("UserCart", fields: [userId], references: [id])
  userId   Int
  CartItem CartItem[] @relation("CartCartItem")
}

model Review {
  id        Int     @id @default(autoincrement())
  content   String
  product   Product @relation("ProductRe", fields: [productId], references: [id])
  user      User    @relation("UserRe", fields: [userId], references: [id])
  productId Int
  userId    Int
}

model Brend {
  id      Int       @id @default(autoincrement())
  name    String
  image   String
  Product Product[]
}

model Color {
  id           Int            @id @default(autoincrement())
  name         String
  code         String
  ColorOptions ColorOptions[] @relation("ColorOption")
}

//tepadagilar bajarilgan

model ProductItem {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  product      Product        @relation("ProductProductItem", fields: [productId], references: [id])
  productId    Int
  image        String
  quantity     Int
  price        Float
  CartItem     CartItem[]     @relation("CartProductItem")
  ColorOptions ColorOptions[] @relation("ProductOption")
  OrderItem    OrderItem[]    @relation("OrderItemProductItem")
}

model CartItem {
  id            Int         @id @default(autoincrement())
  cart          Cart        @relation("CartCartItem", fields: [cartId], references: [id])
  cartId        Int
  productItem   ProductItem @relation("CartProductItem", fields: [productItemId], references: [id])
  productItemId Int
  count         Int
}

model OrderItem {
  id            Int         @id @default(autoincrement())
  productItem   ProductItem @relation("OrderItemProductItem", fields: [productItemId], references: [id])
  order         Order       @relation("OrderProduct", fields: [orderId], references: [id])
  productItemId Int
  orderId       Int
  quantity      Int
}

model Order {
  id         Int         @id @default(autoincrement())
  adress     Address     @relation("AdressOrder", fields: [adressId], references: [id])
  user       User        @relation("OrderUser", fields: [userId], references: [id])
  userId     Int
  adressId   Int
  status     OrderStatus @default(Pending)
  OrderItem  OrderItem[] @relation("OrderProduct")
  totalPrice Float
}

model Like {
  id        Int     @id @default(autoincrement())
  product   Product @relation("ProductLike", fields: [productId], references: [id])
  user      User    @relation("UserLike", fields: [userId], references: [id])
  productId Int
  userId    Int
}

//Pastdagilar bajarilishi shart emas

model ProductOptions {
  variantOption   VarationOption @relation("ProductItemVO", fields: [variantOptionId], references: [id])
  product         Product        @relation("ProductPO", fields: [productId], references: [id])
  productId       Int
  variantOptionId Int

  @@id([productId, variantOptionId])
}

model ColorOptions {
  id            Int         @id @default(autoincrement())
  color         Color       @relation("ColorOption", fields: [colorId], references: [id])
  productItem   ProductItem @relation("ProductOption", fields: [productItemId], references: [id])
  colorId       Int
  productItemId Int
}

// Enums

enum OrderStatus {
  Delivered
  Pending
  Cancelled
}

enum Roles {
  Admin
  User
  UnAuth
}
